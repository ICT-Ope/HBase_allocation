diff -uNr org/src/test/java/org/apache/hadoop/hbase/allocation/test/TestForActionPlus.java changed/src/test/java/org/apache/hadoop/hbase/allocation/test/TestForActionPlus.java
--- src/test/java/org/apache/hadoop/hbase/allocation/test/TestForActionPlus.java	1970-01-01 08:00:00.000000000 +0800
+++ src/test/java/org/apache/hadoop/hbase/allocation/test/TestForActionPlus.java	2011-08-04 19:52:15.000000000 +0800
@@ -0,0 +1,15 @@
+package org.apache.hadoop.hbase.allocation.test;
+
+import org.apache.hadoop.hbase.ipc.PriorityHBaseServer.ActionPriPlus;
+
+public class TestForActionPlus {
+  public static void main(String args[])
+  {
+    ActionPriPlus plus=new ActionPriPlus(1,2,3,4);
+    byte b[]=plus.toBytes();
+    ActionPriPlus plus2=new ActionPriPlus(5,3,33,41);
+    plus2.fromBytes(b);
+    System.out.println(plus2);
+  }
+
+}
diff -uNr org/src/test/java/org/apache/hadoop/hbase/allocation/test/TestForSchedule.java changed/src/test/java/org/apache/hadoop/hbase/allocation/test/TestForSchedule.java
--- src/test/java/org/apache/hadoop/hbase/allocation/test/TestForSchedule.java	1970-01-01 08:00:00.000000000 +0800
+++ src/test/java/org/apache/hadoop/hbase/allocation/test/TestForSchedule.java	2011-08-04 19:52:15.000000000 +0800
@@ -0,0 +1,264 @@
+package org.apache.hadoop.hbase.allocation.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HColumnDescriptor;
+import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.MasterNotRunningException;
+import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.client.HBaseAdmin;
+import org.apache.hadoop.hbase.client.HTable;
+import org.apache.hadoop.hbase.client.Put;
+import org.apache.hadoop.hbase.client.Result;
+import org.apache.hadoop.hbase.client.ResultScanner;
+import org.apache.hadoop.hbase.client.Scan;
+import org.apache.hadoop.hbase.ipc.PriorityHBaseServer;
+import org.apache.hadoop.hbase.util.Bytes;
+
+/**
+ * Test for priority server
+ * 
+ * 
+ * 
+ */
+public class TestForSchedule {
+  static final Configuration conf = HBaseConfiguration.create();
+  static final Random r = new Random();
+
+  public static void main(String args[]) {
+    HBaseAdmin admin = null;
+    try {
+      admin = new HBaseAdmin(conf);
+    } catch (MasterNotRunningException e2) {
+      e2.printStackTrace();
+    } catch (ZooKeeperConnectionException e2) {
+      // TODO Auto-generated catch block
+      e2.printStackTrace();
+    }
+    HTableDescriptor des;
+    try {
+      // HBaseAdmin admin=new HBaseAdmin(conf);
+      des = new HTableDescriptor("testPri8");
+      des.addFamily(new HColumnDescriptor("ff"));
+      des.setValue(Bytes.toBytes("priority"), Bytes.toBytes(0 + ""));
+      admin.createTable(des);
+    } catch (MasterNotRunningException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (ZooKeeperConnectionException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    try {
+      des = new HTableDescriptor("testPri7");
+      des.addFamily(new HColumnDescriptor("ff"));
+      des.setValue(Bytes.toBytes("priority"), Bytes.toBytes(5 + ""));
+      admin.createTable(des);
+    } catch (MasterNotRunningException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (ZooKeeperConnectionException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    try {
+      des = new HTableDescriptor("testPri6");
+      des.addFamily(new HColumnDescriptor("ff"));
+      des.setValue(Bytes.toBytes("priority"), Bytes.toBytes(10 + ""));
+      admin.createTable(des);
+      // HTable t=new HTable("");
+
+    } catch (MasterNotRunningException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (ZooKeeperConnectionException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    try {
+      des = new HTableDescriptor("testPri5");
+      des.addFamily(new HColumnDescriptor("ff"));
+      des.setValue(Bytes.toBytes("priority"), Bytes.toBytes(20 + ""));
+      admin.createTable(des);
+    } catch (MasterNotRunningException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (ZooKeeperConnectionException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+
+    for (int i = 0; i < 30; i++) {
+
+      new Thread() {
+        public void run() {
+          HTable t = null;
+          try {
+            t = new HTable(conf, "testPri8");
+            t.setAutoFlush(false);
+            t.setWriteBufferSize(1024 * 1024);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+          try {
+            TestForSchedule.testT(t);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+        }
+      }.start();
+
+      new Thread() {
+        public void run() {
+          HTable t = null;
+          try {
+            t = new HTable(conf, "testPri7");
+            t.setAutoFlush(false);
+            t.setWriteBufferSize(1024 * 1024);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+
+          try {
+            TestForSchedule.testT(t);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+
+        }
+      }.start();
+
+      new Thread() {
+        public void run() {
+          HTable t = null;
+          try {
+            t = new HTable(conf, "testPri6");
+            t.setAutoFlush(false);
+            t.setWriteBufferSize(1024 * 1024);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+          try {
+            TestForSchedule.testT(t);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+
+        }
+      }.start();
+      new Thread() {
+
+        public void run() {
+          HTable t = null;
+          try {
+            t = new HTable(conf, "testPri5");
+            t.setAutoFlush(false);
+            t.setWriteBufferSize(1024 * 1024);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+          try {
+            TestForSchedule.testT(t);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+        }
+      }.start();
+    }
+
+  }
+
+  
+  static byte[] b;
+  static {
+    String bs="";
+    for(int i=0;i<100;i++)
+    {
+      bs+=i;
+    }
+    b=Bytes.toBytes(bs);
+  }
+  public static void putTest(HTable t, long i) {
+    Put p = new Put(Bytes.toBytes("" + r.nextInt(1000) + (i)
+        + r.nextInt(10000)));
+
+    p.add(
+        Bytes.toBytes("ff"),
+        Bytes.toBytes("ff"),
+        b);
+    try {
+      t.put(p);
+    } catch (IOException e1) {
+      // TODO Auto-generated catch block
+      e1.printStackTrace();
+    }
+  }
+
+  public static Result scanTest(ResultScanner sn)
+
+  {
+    try {
+      return sn.next();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    return null;
+
+  }
+
+  static int inter = 0;
+
+  public static void testT(HTable t) throws IOException {
+    long i = 0;
+    int total=0;
+    long start = System.currentTimeMillis();
+    long end = System.currentTimeMillis();
+    int pri = Integer.parseInt(Bytes.toString(t.getTableDescriptor().getValue(
+        Bytes.toBytes(PriorityHBaseServer.PRI_KEY))));
+    Scan s = new Scan();
+    s.setStartRow(Bytes.toBytes(r.nextInt(10)));
+    t.setScannerCaching(1000);
+    t.setAutoFlush(false);
+    t.setWriteBufferSize(1000 * 1000);
+    ResultScanner sn = t.getScanner(s);
+    long startN=System.currentTimeMillis();
+    while (true) {
+      if (i % 10000 == 0) {
+        end = System.currentTimeMillis();
+        System.out.println("table" + t.getTableDescriptor().getNameAsString()
+            + " pri :" + pri + " time:" + (end - start)+" total :"+i+"  throughput:"+(i*1000)/(end-startN+1));
+        start = end;
+      }
+      //scanTest(sn);
+      putTest(t,i);
+      i++;
+    }
+  }
+
+}
diff -uNr org/src/test/java/org/apache/hadoop/hbase/allocation/test/TestForScheduleWithActionPri.java changed/src/test/java/org/apache/hadoop/hbase/allocation/test/TestForScheduleWithActionPri.java
--- src/test/java/org/apache/hadoop/hbase/allocation/test/TestForScheduleWithActionPri.java	1970-01-01 08:00:00.000000000 +0800
+++ src/test/java/org/apache/hadoop/hbase/allocation/test/TestForScheduleWithActionPri.java	2011-08-04 19:52:15.000000000 +0800
@@ -0,0 +1,235 @@
+package org.apache.hadoop.hbase.allocation.test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HColumnDescriptor;
+import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.MasterNotRunningException;
+import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.client.HBaseAdmin;
+import org.apache.hadoop.hbase.client.HTable;
+import org.apache.hadoop.hbase.client.Put;
+import org.apache.hadoop.hbase.client.Result;
+import org.apache.hadoop.hbase.client.ResultScanner;
+import org.apache.hadoop.hbase.client.Scan;
+import org.apache.hadoop.hbase.ipc.PriorityHBaseServer;
+import org.apache.hadoop.hbase.ipc.PriorityHBaseServer.ActionPriPlus;
+import org.apache.hadoop.hbase.util.Bytes;
+
+/**
+ * Test for priority server
+ * 
+ * 
+ * 
+ */
+public class TestForScheduleWithActionPri {
+  static final Configuration conf = HBaseConfiguration.create();
+  static final Random r = new Random();
+
+  static String cmd = "";
+
+  public static void main(String args[]) {
+
+    System.out.println("usage: writeData , withActionPri ,withoutActionPri");
+    if (args.length == 0) {
+      return;
+    }
+    cmd = args[0];
+    System.out.println("commond is:" + cmd);
+    HBaseAdmin admin = null;
+    try {
+      admin = new HBaseAdmin(conf);
+    } catch (MasterNotRunningException e2) {
+      e2.printStackTrace();
+    } catch (ZooKeeperConnectionException e2) {
+      // TODO Auto-generated catch block
+      e2.printStackTrace();
+    }
+    HTableDescriptor des;
+    try {
+      des = new HTableDescriptor("testPriAction");
+      des.addFamily(new HColumnDescriptor("ff"));
+      des.setValue(Bytes.toBytes("priority"), Bytes.toBytes(0 + ""));
+      admin.createTable(des);
+    } catch (MasterNotRunningException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (ZooKeeperConnectionException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+
+    try {
+      if (cmd.equals("withoutActionPri")) {
+        admin.disableTable("testPriAction");
+        HTableDescriptor des1 = admin.getTableDescriptor(Bytes
+            .toBytes("testPriAction"));
+        des1.setValue(Bytes.toBytes(PriorityHBaseServer.PRI_KEY_ACTION_PLUS),
+            new ActionPriPlus().toBytes());
+        admin.modifyTable(Bytes.toBytes("testPriAction"), des1);
+        admin.enableTable("testPriAction");
+      }
+      if (cmd.equals("withActionPri")) {
+        admin.disableTable("testPriAction");
+        HTableDescriptor des1 = admin.getTableDescriptor(Bytes
+            .toBytes("testPriAction"));
+        des1.setValue(Bytes.toBytes(PriorityHBaseServer.PRI_KEY_ACTION_PLUS),
+            new ActionPriPlus(20, 0, 0, 0).toBytes());
+        admin.modifyTable(Bytes.toBytes("testPriAction"), des1);
+        admin.enableTable("testPriAction");
+      }
+    } catch (IOException e1) {
+      // TODO Auto-generated catch block
+      e1.printStackTrace();
+    }
+    for (int i = 0; i < 60; i++) {
+      new Thread() {
+        public void run() {
+          HTable t = null;
+          try {
+            t = new HTable(conf, "testPriAction");
+            t.setAutoFlush(false);
+            t.setWriteBufferSize(1024 * 1024);
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+          try {
+            TestForScheduleWithActionPri.testT(t, "put");
+          } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+          }
+        }
+      }.start();
+      if (cmd.equals("writeData")) {
+
+        new Thread() {
+          public void run() {
+            HTable t = null;
+            try {
+              t = new HTable(conf, "testPriAction");
+              t.setAutoFlush(false);
+              t.setWriteBufferSize(1024 * 1024);
+            } catch (IOException e) {
+              // TODO Auto-generated catch block
+              e.printStackTrace();
+            }
+
+            try {
+              TestForScheduleWithActionPri.testT(t, "put");
+            } catch (IOException e) {
+              // TODO Auto-generated catch block
+              e.printStackTrace();
+            }
+
+          }
+        }.start();
+      } else {
+        new Thread() {
+          public void run() {
+            HTable t = null;
+            try {
+              t = new HTable(conf, "testPriAction");
+              t.setAutoFlush(false);
+              t.setWriteBufferSize(1024 * 1024);
+            } catch (IOException e) {
+              // TODO Auto-generated catch block
+              e.printStackTrace();
+            }
+
+            try {
+              TestForScheduleWithActionPri.testT(t, "scan");
+            } catch (IOException e) {
+              // TODO Auto-generated catch block
+              e.printStackTrace();
+            }
+
+          }
+        }.start();
+      }
+
+    }
+
+  }
+
+  static byte[] b;
+  static {
+    String bs = "";
+    for (int i = 0; i < 100; i++) {
+      bs += i;
+    }
+    b = Bytes.toBytes(bs);
+  }
+
+  public static void putTest(HTable t, long i) {
+    Put p = new Put(
+        Bytes.toBytes("" + r.nextInt(1000) + (i) + r.nextInt(10000)));
+
+    p.add(Bytes.toBytes("ff"), Bytes.toBytes("ff"), b);
+    try {
+      t.put(p);
+    } catch (IOException e1) {
+      // TODO Auto-generated catch block
+      e1.printStackTrace();
+    }
+  }
+
+  public static Result scanTest(ResultScanner sn)
+
+  {
+    try {
+      return sn.next();
+    } catch (IOException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    return null;
+
+  }
+
+  static int inter = 0;
+
+  public static void testT(HTable t, String type) throws IOException {
+    long i = 0;
+    int total = 0;
+    long start = System.currentTimeMillis();
+    long end = System.currentTimeMillis();
+    int pri = Integer.parseInt(Bytes.toString(t.getTableDescriptor().getValue(
+        Bytes.toBytes(PriorityHBaseServer.PRI_KEY))));
+    Scan s = new Scan();
+    s.setStartRow(Bytes.toBytes(r.nextInt(10)));
+    t.setScannerCaching(1000);
+    t.setAutoFlush(false);
+    t.setWriteBufferSize(1000 * 1000);
+    ResultScanner sn = t.getScanner(s);
+    boolean scan = false;
+    if (type.equals("scan"))
+      scan = true;
+    long startN = System.currentTimeMillis();
+    while (true) {
+      if (i % 10000 == 0) {
+        end = System.currentTimeMillis();
+        System.out.println("type:" + type + "  table"
+            + t.getTableDescriptor().getNameAsString() + " pri :" + pri
+            + " time:" + (end - start) + " total :" + i + "  throughput:"
+            + (i * 1000) / (end - startN + 1));
+        start = end;
+      }
+      if (scan)
+        scanTest(sn);
+      else
+        putTest(t, i);
+      i++;
+    }
+  }
+
+}
diff -uNr org/src/test/java/org/apache/hadoop/hbase/allocation/test/TestPri.java changed/src/test/java/org/apache/hadoop/hbase/allocation/test/TestPri.java
--- src/test/java/org/apache/hadoop/hbase/allocation/test/TestPri.java	1970-01-01 08:00:00.000000000 +0800
+++ src/test/java/org/apache/hadoop/hbase/allocation/test/TestPri.java	2011-08-04 19:52:15.000000000 +0800
@@ -0,0 +1,43 @@
+package org.apache.hadoop.hbase.allocation.test;
+
+public class TestPri extends Thread{
+  public String name="";
+  public static void main(String args[])
+  {
+    System.out.println(Thread.MAX_PRIORITY);
+    System.out.println(Thread.MIN_PRIORITY);
+    System.out.println(Thread.NORM_PRIORITY);
+    
+    TestPri a[]=new TestPri[10];
+    for(int i=1;i<=10;i++)
+    {a[i-1]=new TestPri();
+      a[i-1].setPriority(i);
+      a[i-1].name=i+"";
+    }
+    for(int i=1;i<=10;i++)
+    {
+      a[i-1].start();
+    }
+    try {
+      Thread.currentThread().sleep(200000);
+    } catch (InterruptedException e) {
+      // TODO Auto-generated catch block
+      e.printStackTrace();
+    }
+    for(int i=1;i<=10;i++)
+    {
+      a[i-1].setPriority(10-i+1);
+
+    }
+    
+    
+  }
+  public void run()
+  {
+    while(true)
+    {
+      System.out.println("name "+ name+" pri "+this.getPriority());
+    }
+  }
+
+}
